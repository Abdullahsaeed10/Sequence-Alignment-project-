def draw_MSA_canvas(self, image, layout):
        self.figure = plt.figure(figsize=(15,5))
        self.figure.patch.set_facecolor('#140826')
        self.Canvas = FigureCanvas(self.figure)
        layout.addWidget(self.Canvas,0, 0, 1, 1)
        plt.imshow(image, aspect= 5)
        self.Canvas.draw() 

    def heatmap_parwise_plot(self, traceback_matrix):
        plt.pcolormesh(traceback_matrix,cmap="ocean")
        plt.ylim(len(traceback_matrix),0)
        self.fig = plt.figure(figsize=(15,5))
        self.fig.patch.set_facecolor('#140826')
        self.Canvas = FigureCanvas(self.fig)
        self.pairwise_heatmap.addWidget(self.Canvas,0, 0, 1, 1)
        plt.imshow(traceback_matrix)
        self.Canvas.draw() 

    def correlation_parwise_plot(self, aligned_seq1, aligned_seq2):
        aligned_seq1_copy = []
        aligned_seq2_copy = []
        
        for i in range(len(aligned_seq1)):
            if aligned_seq1[i] == 'a' or aligned_seq1[i] == 'A':
                aligned_seq1_copy.append(1)
            elif aligned_seq1[i] == 'c' or aligned_seq1[i] == 'C':
                aligned_seq1_copy.append(4)
            elif aligned_seq1[i] == 'g' or aligned_seq1[i] == 'G':
                aligned_seq1_copy.append(2)
            elif aligned_seq1[i] == 't' or aligned_seq1[i] == 'T':
                aligned_seq1_copy.append(3)
            elif aligned_seq1[i] == '-':
                aligned_seq1_copy.append(0)
        
        for i in range(len(aligned_seq2)):
            if aligned_seq2[i] == 'a' or aligned_seq2[i] == 'A':
                aligned_seq2_copy.append(2)
            elif aligned_seq2[i] == 'c' or aligned_seq2[i] == 'C':
                aligned_seq2_copy.append(1)
            elif aligned_seq2[i] == 'g' or aligned_seq2[i] == 'G':
                aligned_seq2_copy.append(3)
            elif aligned_seq2[i] == 't' or aligned_seq2[i] == 'T':
                aligned_seq2_copy.append(4)
            elif aligned_seq2[i] == '-':
                aligned_seq2_copy.append(5)

        y = pd.Series(aligned_seq1_copy)
        x = pd.Series(aligned_seq2_copy)
        correlation = y.corr(x)
        correlation
        
        self.fig2 = plt.figure(figsize=(15,5))
        self.fig2.patch.set_facecolor('#140826')
        self.Canvas2 = FigureCanvas(self.fig2)
        self.pairwaise_correlation.addWidget(self.Canvas2,0, 0, 1, 1)
        plt.scatter(x, y)
        plt.plot(np.unique(x),
                np.poly1d(np.polyfit(x, y, 1))
                (np.unique(x)), color='red')
        
        self.Canvas2.draw()

    def MSA_Visualization(self):
        fasta_read = open("aligned.fasta") # read a fasta  file
        sequences= [i for i in SeqIO.parse(fasta_read,'fasta')] # read multiple sequences from the file
        # store each sequence in a variable
        sequence_1= sequences[0].seq
        sequence_2=sequences[1].seq
        sequence_3=sequences[2].seq
        sequence_4=sequences[3].seq

        seq1_str = str(sequence_1)
        seq2_str = str(sequence_2)
        seq3_str = str(sequence_3)
        seq4_str = str(sequence_4)

        def stringToList(data):
            return list(data)

        seq1 = stringToList(seq1_str)
        seq2 = stringToList(seq2_str)
        seq3 = stringToList(seq3_str)
        seq4 = stringToList(seq4_str)

        mat = []
        for i in range(4):
            mat.append(seq1)
        for i in range(4):
            mat.append(seq2)
        for i in range(4):
            mat.append(seq3)
        for i in range(4):
            mat.append(seq4)

        seq_arr = np.asarray(mat)

        seq_arr[seq_arr=='A'] = '1' 
        seq_arr[seq_arr=='G'] = '2'
        seq_arr[seq_arr=='T'] = '3' 
        seq_arr[seq_arr=='C'] = '4'
        seq_arr[seq_arr=='-'] = '0'
        int_seq = np.uint8(seq_arr)
        final = int_seq * 50
        self.draw_MSA_canvas(final, self.MSAVisualization)